{
  "name": "starter-kit",
  "type": "registry:block",
  "description": "",
  "dependencies": [
    "@tiptap/starter-kit",
    "--legacy-peer-deps"

  ],
  "registryDependencies": [
    "separator",
    "button",
    "tooltip"
  ],
  "files": [
    {
      "path": "toolbars/bold.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { BoldIcon } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\nimport type { Extension } from \"@tiptap/core\";\nimport type { StarterKitOptions } from \"@tiptap/starter-kit\";\n\ntype StarterKitExtensions = Extension<StarterKitOptions, any>;\n\nconst BoldToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\t\teditor?.isActive(\"bold\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleBold().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleBold().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <BoldIcon className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Bold</span>\n\t\t\t\t\t<span className=\"ml-1 text-xs text-gray-11\">(cmd + b)</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nBoldToolbar.displayName = \"BoldToolbar\";\n\nexport { BoldToolbar };\n",
      "target": "components/toolbars/bold.tsx"
    },
    {
      "path": "toolbars/blockquote.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { TextQuote } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst BlockquoteToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\t\teditor?.isActive(\"blockquote\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleBlockquote().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleBlockquote().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <TextQuote className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Blockquote</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nBlockquoteToolbar.displayName = \"BlockquoteToolbar\";\n\nexport { BlockquoteToolbar };\n",
      "target": "components/toolbars/blockquote.tsx"
    },
    {
      "path": "toolbars/bullet-list.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { List } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst BulletListToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\t\teditor?.isActive(\"bulletList\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleBulletList().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleBulletList().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <List className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Bullet list</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nBulletListToolbar.displayName = \"BulletListToolbar\";\n\nexport { BulletListToolbar };\n",
      "target": "components/toolbars/bullet-list.tsx"
    },
    {
      "path": "toolbars/code.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Code2 } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst CodeToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\t\teditor?.isActive(\"code\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleCode().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleCode().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <Code2 className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Code</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nCodeToolbar.displayName = \"CodeToolbar\";\n\nexport { CodeToolbar };\n",
      "target": "components/toolbars/code.tsx"
    },
    {
      "path": "toolbars/code-block.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Code, Code2 } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst CodeBlockToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\t\teditor?.isActive(\"codeBlock\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleCodeBlock().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleCodeBlock().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <Code className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Code Block</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nCodeBlockToolbar.displayName = \"CodeBlockToolbar\";\n\nexport { CodeBlockToolbar };\n",
      "target": "components/toolbars/code-block.tsx"
    },
    {
      "path": "toolbars/hard-break.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { WrapText } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst HardBreakToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\"h-8 w-8\", className)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().setHardBreak().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <WrapText className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Hard break</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nHardBreakToolbar.displayName = \"HardBreakToolbar\";\n\nexport { HardBreakToolbar };\n",
      "target": "components/toolbars/hard-break.tsx"
    },
    {
      "path": "toolbars/horizontal-rule.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { SeparatorHorizontal } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst HorizontalRuleToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\"h-8 w-8\", className)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().setHorizontalRule().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <SeparatorHorizontal className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Horizontal Rule</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nHorizontalRuleToolbar.displayName = \"HorizontalRuleToolbar\";\n\nexport { HorizontalRuleToolbar };\n",
      "target": "components/toolbars/horizontal-rule.tsx"
    },
    {
      "path": "toolbars/italic.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { ItalicIcon } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst ItalicToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\t\teditor?.isActive(\"italic\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleItalic().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleItalic().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <ItalicIcon className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Italic</span>\n\t\t\t\t\t<span className=\"ml-1 text-xs text-gray-11\">(cmd + i)</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nItalicToolbar.displayName = \"ItalicToolbar\";\n\nexport { ItalicToolbar };\n",
      "target": "components/toolbars/italic.tsx"
    },
    {
      "path": "toolbars/ordered-list.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { ListOrdered } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst OrderedListToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\t\teditor?.isActive(\"orderedList\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleOrderedList().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleOrderedList().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <ListOrdered className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Ordered list</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nOrderedListToolbar.displayName = \"OrderedListToolbar\";\n\nexport { OrderedListToolbar };\n",
      "target": "components/toolbars/ordered-list.tsx"
    },
    {
      "path": "toolbars/redo.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { CornerUpRight } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst RedoToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\"h-8 w-8\", className)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().redo().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().redo().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <CornerUpRight className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Redo</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nRedoToolbar.displayName = \"RedoToolbar\";\n\nexport { RedoToolbar };\n",
      "target": "components/toolbars/redo.tsx"
    },
    {
      "path": "toolbars/strikethrough.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Strikethrough } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Button, type ButtonProps } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { useToolbar } from \"@/components/toolbars/toolbar-provider\";\n\nconst StrikeThroughToolbar = React.forwardRef<HTMLButtonElement, ButtonProps>(\n\t({ className, onClick, children, ...props }, ref) => {\n\t\tconst { editor } = useToolbar();\n\t\treturn (\n\t\t\t<Tooltip>\n\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\"h-8 w-8\",\n\t\t\t\t\t\t\teditor?.isActive(\"strike\") && \"bg-accent\",\n\t\t\t\t\t\t\tclassName,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\teditor?.chain().focus().toggleStrike().run();\n\t\t\t\t\t\t\tonClick?.(e);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={!editor?.can().chain().focus().toggleStrike().run()}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\t{...props}\n\t\t\t\t\t>\n\t\t\t\t\t\t{children || <Strikethrough className=\"h-4 w-4\" />}\n\t\t\t\t\t</Button>\n\t\t\t\t</TooltipTrigger>\n\t\t\t\t<TooltipContent>\n\t\t\t\t\t<span>Strikethrough</span>\n\t\t\t\t\t<span className=\"ml-1 text-xs text-gray-11\">(cmd + shift + x)</span>\n\t\t\t\t</TooltipContent>\n\t\t\t</Tooltip>\n\t\t);\n\t},\n);\n\nStrikeThroughToolbar.displayName = \"StrikeThroughToolbar\";\n\nexport { StrikeThroughToolbar };\n",
      "target": "components/toolbars/strikethrough.tsx"
    }
  ]
}